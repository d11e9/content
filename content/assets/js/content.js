// Generated by CoffeeScript 1.9.3
(function() {
  $(function() {
    var $config, $content, CONTENT_CHANNEL, buildPost, config, ethHost, ethPort, getContent, refreshPosts;
    CONTENT_CHANNEL = '/content';
    $content = $('#content');
    ethHost = 'localhost';
    ethPort = 8545;
    console.log("content init");
    refreshPosts = function(newRoot) {
      var path;
      path = 'posts/';
      if (newRoot) {
        path = '/ipfs/' + newRoot + '/' + path;
      }
      return $.getJSON(path + 'index.json', function(posts, status, xhr) {
        $('#content .loading').remove();
        console.log("Loaded posts:", posts);
        return posts.map(function(post, index) {
          var $el;
          $el = $("#" + post);
          return $content.append(buildPost(path, post, index, $el));
        });
      });
    };
    buildPost = function(path, post, index, $el) {
      var $post;
      $post = $el.length ? $el : $($('#post-template').html());
      $post.attr('data-index', index);
      $post.attr('id', post);
      getContent(path + post + '/title', function(err, title) {
        return $post.find('.title').html(title);
      });
      getContent(path + post + '/content', function(err, content) {
        var isHttp;
        isHttp = /^https?:\/\//;
        if (isHttp.test(content)) {
          return $post.find('.content').attr('href', content);
        } else {
          return $post.find('.content').attr('href', '/ipfs/' + post);
        }
      });
      getContent(path + post + '/index.json', function(err, comments) {
        $post.find('.comment-count').html(comments.length);
        return $post.find('.comment').attr('href', post);
      });
      if (!$el.length) {
        return $post;
      }
    };
    getContent = function(url, cb) {
      return $.get(url, function(responseText, status, xhr) {
        return cb(!responseText, responseText);
      });
    };
    config = null;
    $config = $('<div id="content-config"/>');
    return $config.load('config', function() {
      var err, identity, messageFilter;
      console.log("Config request response: ", arguments);
      try {
        config = JSON.parse($config.text());
        if (config.defaults) {
          ethHost = config.defaults.eth_host;
          ethPort = config.defaults.eth_port;
          CONTENT_CHANNEL = config.defaults.shh_channel;
          $('#ipfs-status').addClass('connected');
        }
      } catch (_error) {
        err = _error;
        console.log("Unable to parse config");
      }
      web3.setProvider(new web3.providers.HttpProvider("http://" + ethHost + ":" + ethPort));
      try {
        identity = web3.shh.newIdentity();
        messageFilter = web3.shh.filter({
          topics: [CONTENT_CHANNEL]
        });
        $('#eth-status').addClass('connected');
        messageFilter.watch(function(err, msg) {
          var ref;
          if (!err && msg) {
            console.log("Message: ", JSON.stringify(msg));
          }
          if (!err && (msg != null ? (ref = msg.payload) != null ? ref.root : void 0 : void 0)) {
            console.log("Received root hash update: ", msg);
            return refreshPosts(msg.payload.root);
          }
        });
      } catch (_error) {
        err = _error;
        console.log(err);
      }
      refreshPosts(null);
      $('#createPost').click(function() {
        $('#postContent').html($("#postContent-template").html());
        return $('#postContent .submit').click(function() {
          var content, title;
          content = $('#postContent .content').val();
          title = $('#postContent .title').val();
          web3.shh.post({
            from: identity,
            topics: [CONTENT_CHANNEL],
            payload: JSON.stringify({
              from: identity,
              content: content,
              title: title
            })
          });
          console.log("posted content to whisper channel");
          return $('#postContent').empty();
        });
      });
      return $(document.body).on('click', '.post a', function(ev) {
        var $el, $post;
        ev.preventDefault();
        $el = $(this);
        $post = $el.closest('.post');
        if ($el.hasClass('comment')) {
          web3.shh.post({
            from: identity,
            topics: [CONTENT_CHANNEL],
            payload: JSON.stringify({
              from: identity,
              parent: $post.attr('id'),
              content: "A comment!!"
            })
          });
        }
        console.log($el);
        return false;
      });
    });
  });

}).call(this);
